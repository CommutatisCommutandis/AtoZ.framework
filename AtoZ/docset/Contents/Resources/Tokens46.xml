<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSImage+AtoZ.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSImage(AtoZ)</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>
			
			<NodeRef refid="46"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSImage(AtoZ)/imageByScalingProportionallyToSize:background:</TokenIdentifier>
			<Abstract>@brief    Rotates an image around its center by a given
angle in degrees and returns the new image.</Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>			
			
			<Declaration>- (NSImage *)imageByScalingProportionallyToSize:(NSSize)targetSize background:(NSColor *)bk</Declaration>
			
			
			<Anchor>//api/name/imageByScalingProportionallyToSize:background:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSImage(AtoZ)/proportionalRectForTargetRect:</TokenIdentifier>
			<Abstract>We have to get the image representation to do its drawing directly,
because otherwise the stupid NSImage DPI thingie bites us in the butt
again.
	 </Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>			
			
			<Declaration>- (NSRect)proportionalRectForTargetRect:(NSRect)targetRect</Declaration>
			
			
			<Anchor>//api/name/proportionalRectForTargetRect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSImage(AtoZ)/drawEtchedInRect:</TokenIdentifier>
			<Abstract>/#else
/	NSRect imageRect = NSMakeRect(0.0, 0.0, 0.0, 0.0);
/	CGContextRef imageContext = nil;
/	// Get the image dimensions.
/	imageRect.size.height = CGImageGetHeight(image);
/	imageRect.size.width = CGImageGetWidth(image);
/	// Create a new image to receive the Quartz image data.
/	newImage = [[NSImage alloc] initWithSize:imageRect.size];
/	[newImage lockFocus];
/	// Get the Quartz context and draw.
/	imageContext = (CGContextRef)[[NSGraphicsContext currentContext]graphicsPort];
/	CGContextDrawImage(imageContext, (CGRect)&amp;imageRect, image);
/	[newImage unlockFocus];
/#endif</Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>			
			
			<Declaration>- (void)drawEtchedInRect:(NSRect)rect</Declaration>
			
			
			<Anchor>//api/name/drawEtchedInRect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSImage(AtoZ)/imageFromCGImageRef:</TokenIdentifier>
			<Abstract>@method
@abstract   converting a CGImageRef to NSImage
@discussion</Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>			
			
			<Declaration>+ (NSImage *)imageFromCGImageRef:(CGImageRef)image</Declaration>
			
			
			<Anchor>//api/name/imageFromCGImageRef:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSImage(AtoZ)/cgImageRef</TokenIdentifier>
			<Abstract>    @abstract   converting a NSImage to CGImageRef </Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>			
			
			<Declaration>- (CGImageRef)cgImageRef</Declaration>
			
			
			<Anchor>//api/name/cgImageRef</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSImage(AtoZ)/resizedImage:newSize:lockAspectRatio:lockAspectRatioByWidth:</TokenIdentifier>
			<Abstract>    @abstract   converting the input NSImage to a new size </Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>			
			
			<Declaration>+ (NSImage *)resizedImage:(NSImage *)sourceImage newSize:(NSSize)size lockAspectRatio:(BOOL)lock lockAspectRatioByWidth:(BOOL)flag</Declaration>
			
			
			<Anchor>//api/name/resizedImage:newSize:lockAspectRatio:lockAspectRatioByWidth:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSImage(AtoZ)/croppedImage:</TokenIdentifier>
			<Abstract>    @abstract   returning an cropped NSImage </Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>			
			
			<Declaration>- (NSImage *)croppedImage:(CGRect)bounds</Declaration>
			
			
			<Anchor>//api/name/croppedImage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSImage(AtoZ)/saveImage:fileName:fileType:</TokenIdentifier>
			<Abstract>    @abstract   save image to disk</Abstract>
			<DeclaredIn>NSImage+AtoZ.h</DeclaredIn>			
			
			<Declaration>- (BOOL)saveImage:(NSString *)path fileName:(NSString *)name fileType:(NSBitmapImageFileType)type</Declaration>
			
			
			<Anchor>//api/name/saveImage:fileName:fileType:</Anchor>
		</Token>
		
	</File>
</Tokens>