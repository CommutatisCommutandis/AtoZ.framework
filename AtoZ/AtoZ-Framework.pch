#ifdef __OBJC__
#import <Availability.h>
#import <TargetConditionals.h>
#if TARGET_OS_IPHONE
#if __IPHONE_OS_VERSION_MIN_REQUIRED
#import <SystemConfiguration/SystemConfiguration.h>
#import <MobileCoreServices/MobileCoreServices.h>
#import <sys/xattr.h>
#else
#import <SystemConfiguration/SystemConfiguration.h>
#import <CoreServices/CoreServices.h>
#endif
#else
#include <pwd.h>
#include <sys/types.h>
#import <objc/message.h>
#import <objc/runtime.h>
#import <unistd.h>
#import <libkern/OSAtomic.h>
#import <sys/time.h>
#import <sys/xattr.h>
#import <sys/sysctl.h>
#import <sys/stat.h>
#import <dirent.h>
#import <xpc/xpc.h>
#import <Cocoa/Cocoa.h>
#import <AppKit/AppKit.h>
#import <Carbon/Carbon.h>
#import <Quartz/Quartz.h>
#import <Python/Python.h>
#import <Security/Security.h>
#import <Foundation/Foundation.h>
#import <QuartzCore/QuartzCore.h>
#import <AudioToolbox/AudioToolbox.h>
#import <CoreServices/CoreServices.h>
#import <AVFoundation/AVFoundation.h>
#import <ApplicationServices/ApplicationServices.h>
#endif

/*
 #undef ah_retain #undef ah_dealloc
 #undef ah_autorelease autorelease
 #undef ah_dealloc dealloc
 */

#if __has_feature(objc_arc)											// ARC Helper Version 2.2
#define ah_retain 		self
#define ah_release 		self
#define ah_autorelease 	self

#define release 			self										// Is this right?  Why's mine different?
#define autorelease 		self										// But shit hits fan without.

#define ah_dealloc 		self
#else
#define ah_retain 		retain
#define ah_release 		release
#define ah_autorelease 	autorelease
#define ah_dealloc 		dealloc
#undef 	__bridge
#define  __bridge
#undef   __bridge_transfer
#define  __bridge_transfer
#endif
#if !__has_feature(objc_arc_weak)									// Weak reference support
#undef 	  ah_weak
#define 	  ah_weak   unsafe_unretained
#undef 	__ah_weak
#define 	__ah_weak __unsafe_unretained
#endif

#undef ah_weak_delegate													// Weak delegate support
#undef __ah_weak_delegate
#if 						 	__has_feature(objc_arc_weak) && \
(!(defined __MAC_OS_X_VERSION_MIN_REQUIRED) ||\
__MAC_OS_X_VERSION_MIN_REQUIRED >= __MAC_10_8)
#define   ah_weak_delegate weak
#define __ah_weak_delegate __weak
#else
#define   ah_weak_delegate   unsafe_unretained
#define __ah_weak_delegate __unsafe_unretained
#endif																		// ARC Helper ends


//  ARC Helper Version 1.3.1
//  Created by Nick Lockwood on 05/01/2012. Copyright 2012 Charcoal Design
//  Distributed under the permissive zlib license
//  Get the latest version from here: https://gist.github.com/1563325
#ifndef AH_RETAIN
#if __has_feature(objc_arc)
#define AH_RETAIN(x) (x)
#define AH_RELEASE(x) (void)(x)
#define AH_AUTORELEASE(x) (x)
#define AH_SUPER_DEALLOC (void)(0)
#define __AH_BRIDGE __bridge
#else
#define __AH_WEAK
#define AH_WEAK assign
#define AH_RETAIN(x) [(x) retain]
#define AH_RELEASE(x) [(x) release]
#define AH_AUTORELEASE(x) [(x) autorelease]
#define AH_SUPER_DEALLOC [super dealloc]
#define __AH_BRIDGE
#endif
#endif

#import "JREnum.h"

//#define EXCLUDE_STUB_PROTOTYPES 1
//#import <PLWeakCompatibility/PLWeakCompatibilityStubs.h>
#import <Rebel/Rebel.h>
#import <FunSize/FunSize.h>
#import <DrawKit/DKDrawKit.h>
#import <KSHTMLWriterFramework/KSHTMLWriterFramework.h>
#import <Zangetsu/Zangetsu.h>
#import <BlocksKit/BlocksKit.h>
#import <CocoaPuffs/CocoaPuffs.h>
#import <AtoZBezierPath/AtoZBezierPath.h>
#import <AtoZAppKit/BGHUDAppKit.h>
//#import <MapKit/MapKit.h>
//#import <Nu/Nu.h>
//#import <Lumberjack/Lumberjack.h>
//#import <XPCKit/XPCKit.h>
//#import <SNRHUDKit/SNRHUDKit.h>
//#import <NanoStore/NanoStore.h>
//#import <AtoZUI/AtoZUI.h>
//#import <libatoz.h>

//#import "AutoCoding.h"
//#import "HRCoder.h"
#import "AtoZUmbrella.h"
#import "AtoZGeometry.h"
#import "AtoZFunctions.h"
#import "BaseModel.h"
#import "BaseModel+AtoZ.h"
//#import "AtoZ.h"
#import "SNRHUDButtonCell.h"
#import "SNRHUDImageCell.h"
#import "SNRHUDScrollView.h"
#import "SNRHUDSegmentedCell.h"
#import "SNRHUDTextFieldCell.h"
#import "SNRHUDTextView.h"
#import "SNRHUDWindow.h"

#endif  //  END AZFRAMEWORK PCH  #ifdef __OBJC__


//#import "NSObject+AutoMagicCoding.h"
//#import "AZSizer.h"
//#import "AZObject.h"
//#import "AZFile.h"
//#import "AZGeometry.h"
//#import "Nu.h"

//#define NSLog(__VA_ARGS__) NSLog(@"[%s:%d]: %@", __FILE__, __LINE__, [NSString stringWithFormat:__VA_ARGS__])
//	#define NSLog(args...) QuietLog(__FILE__,__LINE__,__PRETTY_FUNCTION__,args)
//#define NSLog(...) qlog(format,...) {\
//#else
//# define NSLog(â€¦) /* */
//#endif

//#define NSLog(...) NSLog(__VA_ARGS__) {\
//va_list argList;\
//va_start(argList, format);\
//NSString *file = [[NSString stringWithUTF8String:__FILE__] lastPathComponent]; \
//printf("%s:%d - ", [file UTF8String], __LINE__); \
//QuietLog((format),##__VA_ARGS__); \
//}

//if (format == nil) {	printf("nil\n"); return; }\
//va_list argList;\
//va_start(argList, format);\
//NSString *s = [[NSString alloc] initWithFormat:format arguments:argList];\
//printf("%s\n", [[s stringByReplacingOccurrencesOfString:@"%%" withString:@"%%%%"] UTF8String]);\
//[s release];\
//va_end(argList);\
//}

//{ \
//NSString *file = [[NSString stringWithUTF8String:__FILE__] lastPathComponent]; \
//printf("%s:%d - ", [file UTF8String], __LINE__); \
//QuietLog((format),##__VA_ARGS__); \
//}
//	#define NSLog(format,...) { \
//	NSString *file = [[NSString stringWithUTF8String:__FILE__] lastPathComponent]; \
//	printf("%s:%d - ", [file UTF8String], __LINE__); \
//	QuietLog((format),##__VA_ARGS__);	}


//#endif
//static inline BOOL isEmpty(id thing);
//	return thing ?: [thing respondsToSelector:@selector(length)] && [ (NSD*)thing length]
//				 ?: [thing respondsToSelector:@selector(count) ] && [ (NSA*)thing count ]
//					NO;
//}

// StringConsts.h
//#ifdef SYNTHESIZE_CONSTS
//# define STR_CONST(name, value) NSString* const name = @ value
//#else
//# define STR_CONST(name, value) extern NSString* const name
//#endif

//The in my .h/.m pair where I want to define the constant I do the following:
// myfile.h
//#import <StringConsts.h>

//STR_CONST(MyConst, "Lorem Ipsum");
//STR_CONST(MyOtherConst, "Hello world");

// myfile.m
//#define SYNTHESIZE_CONSTS
//#import "myfile.h"
//#undef SYNTHESIZE_CONSTS



#ifndef _OmniBase_assertions_h_
#define _OmniBase_assertions_h_
//#import <OmniBase/FrameworkDefines.h>
#import <objc/objc.h>

//#if defined(DEBUG) || defined(OMNI_FORCE_ASSERTIONS)
//#define OMNI_ASSERTIONS_ON
//#endif

// This allows you to turn off assertions when debugging
//#if defined(OMNI_FORCE_ASSERTIONS_OFF)
#undef OMNI_ASSERTIONS_ON
//#warning Forcing assertions off!
//#endif


// Make sure that we don't accidentally use the ASSERT macro instead of OBASSERT
#ifdef ASSERT
#undef ASSERT
#endif
typedef void (*OBAssertionFailureHandler)(const char *type, const char *expression, const char *file, unsigned int lineNumber);
#if defined(OMNI_ASSERTIONS_ON)
OmniBase_EXTERN void OBSetAssertionFailureHandler(OBAssertionFailureHandler handler);
OmniBase_EXTERN void OBAssertFailed(const char *type, const char *expression, const char *file, unsigned int lineNumber);
#define OBPRECONDITION(expression)	do{if(!(expression))OBAssertFailed("PRECONDITION", #expression,__FILE__,__LINE__);}while(NO)
#define OBPOSTCONDITION(expression)	do{if(!(expression))OBAssertFailed("POSTCONDITION",#expression,__FILE__,__LINE__);}while(NO)
#define OBINVARIANT(expression)		do{if(!(expression))OBAssertFailed("INVARIANT",    #expression,__FILE__,__LINE__);}while(NO)
#define OBASSERT(expression)			do{if(!(expression))OBAssertFailed("ASSERT", 		#expression,__FILE__,__LINE__);}while(NO)
#define OBASSERT_NOT_REACHED(reason)do{					  OBAssertFailed("NOTREACHED", 	     reason,__FILE__,__LINE__);}while(NO)
#else	// else insert blank lines into the code
#define OBPRECONDITION(expression)
#define OBPOSTCONDITION(expression)
#define OBINVARIANT(expression)
#define OBASSERT(expression)
#define OBASSERT_NOT_REACHED(reason)
#endif
#endif // _OmniBase_assertions_h_

